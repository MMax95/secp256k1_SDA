#ifndef DEFINITIONS_H
#define DEFINITIONS_H
///////////////////// Initialiser values ///////////////////////

/// Build flags
// #define DEBUG
#define TARGET_DEBUG
#define TESTING ///WARNING! do not use during live operation!! The stdout buffer will get overloaded

/// Variable initializers

#define MAX_HOST_NAME_LENGTH                            64u
#define MAX_MESSAGE_LINE                                2048u
#define INITIALVAL_BIGNUM                               0u

#define PREFFERED_BASE                                  16u ///TODO: remove string definition dependencies to allow modification
#define LSB_READ_BASE                                   10u

#define LSB_STRING_SIZE                                 4u
#define SOLUTION_STRING_SIZE                            10u
#define GMP_LIMBNUMBER                                  4u

#define PRIME_TRIALS                                    23u //// Number of trials used by the mpz_probab_prime_p
#define MESSAGE_SIZE_MAX                                512u
#define MESSAGE_QUEUE_SIZE                              10u
#define CHALLANGE_NUMBER                                5u
#define CHALLANGE_SIZE_MAX                              (CHALLANGE_NUMBER) * LSB_STRING_SIZE
#define SOLUTION_SIZE_MAX                               (CHALLANGE_NUMBER) * SOLUTION_STRING_SIZE
#define TEST_GENERATED_SLICE_NUMBER                     5u
#define TEST_GENERATED_POINTS_PER_SLICE                 1000u
#define TEST_GENERATED_POINT_NUMBER                     5000u
#define TEST_GENERATED_INCREMENTSIZE                    "1"
#define PROGRESSDATA_INDEXLENGTH                        5u
#define PROGRESSDATA_HASHLENGTH                         5u
#define PROGRESSDATA_TOTALCHECKBYTES                    PROGRESSDATA_INDEXLENGTH + PROGRESSDATA_HASHLENGTH
#define PROGRESSDATA_DATACONTAINERSIZE                  MAX_MESSAGE_LINE - PROGRESSDATA_TOTALCHECKBYTES
#define PORTLENGTH                                      10u       // port length shall be 10 characters long. any smaller character size will have to use padding
#define HANDLERTOKENSIZE                                32u // handler confirmation token size
#define DEFAULT_SERVER_PORT                             50001
#define DEFAULT_SERVER_IP                               127001

#define ITERATOR_SM_RETRY_COUNT 3u
#define ITERATOR_SM_RETRY_DELAY 0.4
#define BUFFERED_SOCKETS 5u //the ammount of buffered sockets the frontend can hold before refusing new ones

#define PREFFERED_BASE                                  16u

/// Cycle durations
#define MAIN_CYCLE_MS                                   100u
#define UI_SM_CYCLE                                      0.2

//////////////////////////// ERROR CODES /////////////////////////


/// Verbose point generation errors
#define VERBOSE_GENERATION_E_OK                         "Point generation parameters are valid"
#define VERBOSE_GENERATION_E_UNKNOWN_POINT_KEY          "Starting point key is not known"
#define VERBOSE_GENERATION_E_TOO_MANY_SLICES            "Number of slices bigger than the number of desired points"
#define VERBOSE_GENERATION_E_TOO_MANY_POINTS_PER_SLICE  "Number of points per slice too big"
#define VERBOSE_GENERATION_E_POINTS_OUTSIDE_RANGE       "Generated points outside of symmetry range"
#define VERBOSE_GENERATION_E_NO_SLICES                  "There should be at least one number slice"
#define VERBOSE_GENERATION_E_POINT_NUMBER_NOT_MATCHING  "Points per slice and point number should match for continuous generation"

#define UNIMPLEMENTED_FUNCTIONALITY_TAG                 "Unimplemented yet"
#define FUNCTIONALITY_IN_DEVELOPMENT_TAG                "Functionality still under development"

/// Known file types
#define FILETYPE_UNCOMPRESSED_POINTS                    0u
#define FILETYPE_COMPRESSED_POINTS                      1u
#define FILETYPE_HASHED_POINTS                          2u
#define FILETYPE_CHECKPOINT                             3u
#define FILETYPE_UNKNOWN                                4u

// Iteration algorithm types
#define ITERATION_ALGORITHM_INVALID                     0u
#define ITERATION_ALGORITHM_CONTINUOUS_STEPS            1u
#define ITERATION_ALGORITHM_SLICED_STEPS                2u
#define ITERATION_ALGORITHM_CONTINUOUS_MULTIPLY         3u
#define ITERATION_ALGORITHM_CONTINUOUS_DOUBLING         4U
#define ITERATION_ALGORITHM_BTREE_SUBDIVISION           5U

// Workload distribution types
#define WORKLOAD_DISTRIBUTION_INVALID                   0u
#define WORKLOAD_DISTRIBUTION_SYNCED                    1u
#define WORKLOAD_DISTRIBUTION_SLICED                    2u
#define WORKLOAD_DISTRIBUTION_SCATTERED                 3u






///////////////////// Collector functions ///////////////////////

#define COLLECTRESIDUEDEBUG /// Collect residue random keys generated by the test process

#ifdef COLLECTRESIDUEDEBUG
#define COLFO std::fstream residueFile;
#define COLLECT(point) residueFile.open("col", std::fstream::app);residueFile << point.getK() << "\n"<< point.getX() << "\n"<< point.getY() << "\n\n";residueFile.close()
#else
#define COLFO
#define COLLECT(point)
#endif

#endif //SECP251K1_SANDBOX_CONSTANTS_H
